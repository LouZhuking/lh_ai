// 搜索插入位置函数 - 在有序数组中找到目标值的插入位置
var searchInsert = function (nums, target) {
  // 初始化双指针：左指针从0开始，右指针从数组末尾开始
  // ans初始设为数组长度，处理目标值大于所有元素的情况
  let l = 0, r = nums.length - 1, ans = nums.length;

  // 二分查找主循环：当左右指针未相遇时继续搜索
  while (l <= r) {
    // 计算中间位置：使用位运算右移1位相当于除以2并取整
    // 这种写法可以防止大数相加溢出，比 (l + r) / 2 更安全
    const mid = l + Math.floor((r - l) >> 1);

    // 核心判断逻辑：如果目标值大于中间元素
    if (target > nums[mid]) {
      // 目标值在右半部分，移动左指针到中间+1的位置
      l = mid + 1;
    } else {
      // 目标值小于等于中间元素，可能插入位置就是mid
      // 更新答案为当前mid，并继续在左半部分搜索更小的插入位置
      ans = mid;
      r = mid - 1;
    }
  }

  // 返回答案：要么是找到的相等元素位置，要么是最终左指针位置（插入位置）
  return ans;
};